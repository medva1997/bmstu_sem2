        -:    0:Source:functions.c
        -:    0:Programs:2
        -:    1:#include <stdio.h>
        -:    2:#include "functions.h"
        -:    3:
        -:    4:#define ERROR_NE -1
        -:    5:
        -:    6:/**
        -:    7: * @brief expected_value - math expected_value
        -:    8: * @param f[in] - input file
        -:    9: * @param expectvalue[out] - math expected_value
        -:   10: * @return 0
        -:   11: */
        5:   12:int expected_value(FILE *f, float *expectvalue)
        -:   13:{
        5:   14:    float summ=0;
        5:   15:    int n=0;
        -:   16:    float temp;
       21:   17:    while ((fscanf(f, "%f", &temp)) == 1) {
       11:   18:        summ=summ+temp;
       11:   19:        n++;
        -:   20:
        -:   21:    }
        5:   22:    if(n==0)
        -:   23:    {
        1:   24:        return ERROR_NE;
        -:   25:    }
        4:   26:    *expectvalue=summ/n;
        4:   27:    return 0;
        -:   28:}
        -:   29:
        -:   30:
        -:   31:
        -:   32:/**
        -:   33: * @brief dispersionfunc - dispersion
        -:   34: * @param f[in] - input file
        -:   35: * @param expectvalue[in] - math expected value
        -:   36: * @param dispersion[out] - dispersion
        -:   37: * @return 0
        -:   38: */
        -:   39:
        4:   40:int dispersionfunc(FILE *f,float expectvalue, float *dispersion)
        -:   41:{
        4:   42:    float summ=0;
        4:   43:    int n=0;
        -:   44:    float temp;
       19:   45:    while ((fscanf(f, "%f", &temp)) == 1) {
       11:   46:        summ=summ+(temp-expectvalue)*(temp-expectvalue);
       11:   47:        n++;
        -:   48:
        -:   49:    }
        -:   50:
        4:   51:    if(n==0)
        -:   52:    {
    #####:   53:        return ERROR_NE;
        -:   54:    }
        -:   55:
        4:   56:    *dispersion=summ/n;
        4:   57:    return 0;
        -:   58:}
