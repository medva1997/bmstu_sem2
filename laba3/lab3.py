import pylabimport laba3_part2from matplotlib import mlabimport numpy as npimport mathdef MainInput():    manualinput = True    manualsmallintput = True    manualinput = False    manualsmallintput = False    if (manualinput == True):        a = float(input("Введите значение левой границы: "))        b = float(input("Введите значение правой границы: "))        h = float(input("Введите длину шага: "))    else:        a = -20        b = 20        h = 3.14    if (manualsmallintput == True):        epsx = float(input("Введите значение погрешности по x: "))        epsy = float(input("Введите значение погрешности по y: "))        n = int(input(("Введите  максимальное количество итераций: ")))    else:        epsy = 0.00001        epsx = 0.00001        n = 100    return a, b, h, n, epsx, epsydef Func1(x):    # print("f1")    return laba3_part2.Func1(x)def ProizF1(x):    return laba3_part2.ProizF1(x)def Proiz2F1(x):    return -math.sin(x)def Func2(x):    #print("f2")    return laba3_part2.FuncZero(x)def ProizF2(x):    return laba3_part2.ProizZero(x)def Func3(x):    # print("f3")    return laba3_part2.Func4(x)def ProizF3(x):    return laba3_part2.ProizF4(x)def Proiz2F3(x):    return -math.cos(x)def SearchExtpemum(f1,proizF1, f2 ):    ext=[]    for i in range(int((b - a) / h)):        z = laba3_part2.SmallCounter(a + i * h, a + (i + 1) * h, n, epsx, epsy, len(table), f1, proizF1, f2)        if (z != []):            ext.append(z)        z = laba3_part2.SmallCounter(a + int((b - a) // h) * h, b, n, epsx, epsy, len(table), f1, proizF1, f2)        if (z != []):            ext.append(z)    return extdef Draw(func1, func2):    # генирация точек графика    xlist = mlab.frange(a, b, 0.01)    ylist = [func1(x) for x in xlist]    ylist2 = [func2(x) for x in xlist]    # Генирирум ось    y0 = [0 for x in xlist]    pylab.plot(xlist, ylist)    #pylab.plot(xlist, y0, label='line1', color='blue')    pylab.plot(xlist, ylist2, label='$sin(x)/x)$', color='red')    pylab.legend()    # Включаем рисование сетки    pylab.grid(True)    pylab.fill_between(xlist, ylist, ylist2, color='green', alpha=0.25)    # если мало разбиений, то переопереляем сетку под шаг    if ((round((b - a) / h)) < 25):        pylab.xticks([a + i * h for i in range(round((b - a) / h) + 1)])    # рисуем корни, промерка того что корень не содержит ошибок    for i in range(1, len(table)):        if (table[i][4] != ':-('):            pylab.scatter(table[i][3], table[i][4])                # рисуем корни, промерка того что корень не содержит ошибок    for i in range(1, len(korn)):        if (korn[i][4] != ':-('):            pylab.scatter(korn[i][3], func1(float(korn[i][3])))    for i in range(1, len(korn1)):        if (korn1[i][4] != ':-('):            pylab.scatter(korn1[i][3], func2(float(korn1[i][3])))    # Рисуем фогрму с графиком    pylab.show()def Counter(f1, proizF1, f2):    for i in range(int((b - a) / h)):        z = laba3_part2.SmallCounter(a + i * h, a + (i + 1) * h, n, epsx, epsy, len(table), f1, proizF1, f2)        if (z != []):            table.append(z)    z = laba3_part2.SmallCounter(a + int((b - a) // h) * h, b, n, epsx, epsy, len(table), f1, proizF1, f2)    if (z != []):        table.append(z)a, b, h, n, epsx, epsy = MainInput()ln = ['N', 'A', 'B', 'X', 'F(x)', 'итераций', 'код ошибки']table = []korn = []korn1 = []table.append(ln)ln = ['A', 'B', 'X', 'F(x)', 'итераций', 'код ошибки']#korn.append(ln)Counter(Func1, ProizF1, Func3)#Counter(Func1, ProizF1, Func2)korn = SearchExtpemum( ProizF1,Proiz2F1,Func2 )#korn1=SearchExtpemum( ProizF3,Proiz2F3,Func2 )#laba3_part2.PrintTable(korn)laba3_part2.PrintTable(table)#laba3_part2.PrintTable(korn)s=0for i in range(1,len(table)-1):    temp=laba3_part2.integrare_by_bull(float(table[i][3]),float(table[i+1][3]),100,Func3)    temp1=laba3_part2.integrare_by_bull(float(table[i][3]),float(table[i+1][3]),100,Func1)    temp=temp-temp1       s=abs(temp)+sprint("S заштрихованой части: ", s)print()print("Коды ошибок:")print("0 - Нет ошибок")print("1 - Превышение кол-во итераций")print("2 - Корня нет на участке")Draw(Func1, Func3)